import { cookies } from 'next/headers';
// auth helpers 
import { authenticateToken } from './api/users/helpers/authHelpers';
import { Geist, Geist_Mono } from "next/font/google";
// global css
// @ts-ignore
import "./globals.css";
// Bootstrap CSS minified file
// @ts-ignore
import "bootstrap/dist/css/bootstrap.min.css";
// Context imports 
import AuthProvider from "./context/AuthContext";
// types 
import type { Metadata } from "next";
import { UserTokenData } from './types/shared/types';
import LoadingComponent from './components/ui_helpers/loading_component';
import MoviesProvider from './context/MoviesContext';
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // check for a login cookie and hydrate the auth context if it exists
  const cookieStore = await cookies();
  const token = cookieStore.get("token")?.value;
  let initialUser: UserTokenData | null = authenticateToken(token);

  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        <AuthProvider initialUser={initialUser}>
          <MoviesProvider>
            <LoadingComponent />
            {children}
          </MoviesProvider>
        </AuthProvider>
      </body>
    </html>
  );
}